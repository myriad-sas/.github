name: cd

on: 
  workflow_call:
    secrets:
      github-pat:
        description: >-
          GitHub personal access token
        required: true
    inputs:
      environment:
        description: >-
          one of the testing, preprod or prod envinronment, for the workflow run
        required: true
        type: string
      runner:
        description: >-
          runner label on which this workflow will be ran
        required: true
        type: string
      image:
        description: >-
          docker image url 
        required: true
        type: string
      env-path:
        description: >-
          path to the configuration file of environment variables
        default: ./.github/.env
        required: false
        type: string

jobs:
  check:
    name: check
    runs-on:  ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
      packages: read
      issues: write
    outputs:
      continue:  ${{ steps.check-continue.outputs.continue }}
    steps:
      - name: get freeze status
        if: inputs.environment != 'testing' 
        id: status
        uses: myriad-actions/get-deployment-freeze-status@main
        with:
          github-pat:  ${{ secrets.github-pat }}
      - name: annotations
        if: inputs.environment == 'preprod' && steps.status.outputs.IS_PREPROD_FROZEN == 'unfrozen'
        run: |
          ${{ inputs.environment == 'preprod' }} && echo "::notice title=PREPROD:: ${{ steps.status.outputs.IS_PREPROD_FROZEN }}" || echo "continue" 
          ${{ inputs.environment == 'preprod' && steps.status.outputs.IS_PREPROD_FROZEN == 'unfrozen'  }} && echo "::notice title=PREPROD DEPLOYEMENT> An issue will be created in the Issues tab::The timeout minutes of this issues is set to 20 minutes, after which the workflow will continue without deployment. It is possible to re-run the preprod and only the preprod deployment by clicking on the preprod deploy job in the jobs panel, then on the re-run button right beside. The button is visible only after the whole workflow is finished or cancelled, regardless of the outcome" || echo "continue"
          ${{ inputs.environment == 'prod' }} && echo "::notice title=PROD:: ${{ steps.status.outputs.IS_PROD_FROZEN }}" || echo "continue"
        continue-on-error: true
      - name: check continue
        id: check-continue
        run: |
          echo "continue=false" >> $GITHUB_OUTPUT
          ${{ inputs.environment == 'preprod' }} && echo "continue=true" >> $GITHUB_OUTPUT || echo "continue"
          ${{ inputs.environment == 'preprod' && steps.status.outputs.IS_PREPROD_FROZEN == 'unfrozen'}} && echo "continue=true" >> $GITHUB_OUTPUT || echo "skip preprod"
          ${{ inputs.environment == 'prod' && steps.status.outputs.IS_PROD_FROZEN == 'unfrozen' }} && echo "continue=true" >> $GITHUB_OUTPUT  || echo "skip prod"
          
  deploy:
    name: deploy
    needs:
      - check
    if: needs.check.outputs.continue != 'false'
    runs-on:  ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
      packages: read
      issues: write
    container:
      image: ghcr.io/myriad-sas/${{ inputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      continue:  ${{ steps.check-continue.outputs.continue }}
    steps:
      - name: request approval
        uses: trstringer/manual-approval@v1
        if: inputs.environment == 'preprod' && steps.status.outputs.IS_PREPROD_FROZEN == 'unfrozen'
        id: approval
        timeout-minutes: 20
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ env.PREPROD-APPROVERS }}
          minimum-approvals: 1
          issue-title: "requested by ${{ github.actor }}"
      - name: init container
        uses: myriad-actions/init-container@main
      - name: init job  
        uses: myriad-actions/init-job@main
        with:
          github-pat: ${{ secrets.github-pat }}
          env-path: ${{ inputs.env-path }}
      - name: init cache
        uses: actions/cache@v3
        with:
          path: main/${{ env.ARTIFACTS-SRC-PATH }}
          key: ${{ github.sha }}
      - name: set env
        if: inputs.environment != 'testing' 
        run: echo 'NEXT-ENV=${{ inputs.environment }}' >> $GITHUB_ENV
      - name: tag env
        uses: myriad-actions/run@main
        if: inputs.environment != 'testing' 
        with:
          script: ${{ env.SCRIPT5 }}
          args: ${{ env.NEXT-ENV }}
      - name: checkout configurations
        uses: actions/checkout@v3
        with:
          repository:  ${{ env.CI-CONFIG-REPO }}
          token: ${{ secrets.github-pat }}
          path: ${{ env.CI-CONFIG-FOLDER-NAME }}
      - name: deploy
        uses: myriad-actions/run@main
        with:
          script: ${{ env.LANG }}/${{ env.SCRIPT3 }} 
          args: ${{ inputs.environment }}
      - name: freeze prod
        uses: myriad-actions/set-deployment-freeze-status@main
        if: inputs.environment == 'prod'
        with:
          environment: prod
          github-pat:  ${{ secrets.github-pat }}
          status: frozen

  validate:
    name: validate
    needs:
      - deploy
    runs-on:  ${{ inputs.runner }}
    permissions:
      id-token: write
      contents: read
      packages: read
    container:
      image: ghcr.io/myriad-sas/${{ inputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: init container
        uses: myriad-actions/init-container@main
      - name: init job  
        uses: myriad-actions/init-job@main
        with:
          github-pat: ${{ secrets.github-pat }}
          env-path: ${{ inputs.env-path }}
      - name: init cache
        uses: actions/cache@v3
        with:
          path: main/${{ env.ARTIFACTS-SRC-PATH }}
          key: ${{ github.sha }}
      - name: validate installed version
        uses: myriad-actions/run@main
        with:
          script: ${{ env.SCRIPT41 }} 
          args: ${{ inputs.environment }}
