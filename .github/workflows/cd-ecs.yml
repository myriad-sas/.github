name: cd

on: 
  workflow_call:
    secrets:
      github-pat:
        description: >-
          GitHub personal access token
        required: true
    inputs:
      environment:
        description: >-
          one of the testing, preprod or prod envinronment, for the workflow run
        required: true
        type: string
      runner:
        description: >-
          runner label on which this workflow will be run
        required: true
        type: string
      task_name:
        description: >
          ecs task name
        required: true
        type: string
      container_name:
        description: >
          ecs task container name
        default: ''
        required: true
        type: string
      image_name:
        description: >
          fully qualified image registry name
        default: ''
        required: true
        type: string
      cluster_name:
        description: >
          ecs cluster name
        default: ''
        required: true
        type: string
      ecs_service_name:
        description: >
          ecs service name
        default: ''
        required: true
        type: string
      env-path:
        description: >-
          path to the configuration file of environment variables
        default: ./.github/.env
        required: false
        type: string
      config-path:
        description: >-
          path to the configuration file of environment variables
        default: .github/ecr.json
        required: false
        type: string

jobs:
  init:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      MYSQL-VERSION: ${{ steps.vars.outputs.MYSQL-VERSION }}
      REDIS-VERSION: ${{ steps.vars.outputs.REDIS-VERSION }}
      INFLUXDB-VERSION: ${{ steps.vars.outputs.INFLUXDB-VERSION }}
      RELEASE:  ${{ steps.vars.outputs.RELEASE }}
      IMAGE: ${{ steps.vars.outputs.IMAGE }}
      IS_PREPROD_FROZEN: ${{ steps.status.outputs.IS_PREPROD_FROZEN }}
      IS_PROD_FROZEN: ${{ steps.status.outputs.IS_PROD_FROZEN }}
      RUNNER: ghr-aws
    steps:
      - name: init job
        uses: myriad-actions/init-job@main
        with:
          github-pat: ${{ secrets.github-pat }}
          env-path: ${{ inputs.env-path }}
      - name: set vars
        id: vars
        run: |
          ${{ env.MYSQL-VERSION == '' }} && echo "MYSQL-VERSION=latest"  >> $GITHUB_OUTPUT || echo "MYSQL-VERSION=${{ env.MYSQL-VERSION }}"  >> $GITHUB_OUTPUT
          ${{ env.REDIS-VERSION == '' }} && echo "REDIS-VERSION=latest"  >> $GITHUB_OUTPUT || echo "REDIS-VERSION=${{ env.REDIS-VERSION }}"  >> $GITHUB_OUTPUT
          ${{ env.INFLUXDB-VERSION == '' }} && echo "INFLUXDB-VERSION=latest"  >> $GITHUB_OUTPUT || echo "INFLUXDB-VERSION=${{ env.INFLUXDB-VERSION }}"  >> $GITHUB_OUTPUT
          ${{ contains(github.ref_name, env.RELEASE-TAG-PREFIX)  }}  &&  echo "RELEASE=true" >> $GITHUB_OUTPUT  || echo "not a release"
          echo "IMAGE=${{ env.DOCKER-RUNNER-IMAGE }}" >> $GITHUB_OUTPUT
        shell: bash
      - name: get freeze status
        id: status
        uses: myriad-actions/get-deployment-freeze-status@main
        with:
          github-pat:  ${{ secrets.github-pat }}
      - name: approval annotation
        run: |
          echo "::notice title=preprod status:: ${{ steps.status.outputs.IS_PREPROD_FROZEN }}"
          echo "::notice title=prod status:: ${{ steps.status.outputs.IS_PROD_FROZEN }}"
          echo "::notice title=ref:: ${{ github.ref_name }}"
      - name: approval annotation
        if: steps.status.outputs.IS_PREPROD_FROZEN == 'unfrozen'
        run: |
          echo "::notice title=PREPROD DEPLOYEMENT> An issue will be created in the Issues tab::The timeout minutes of this issues is set to 20 minutes, after which the workflow will continue without deployment. It is possible to re-run the preprod and only the preprod deployment by clicking on the preprod deploy job in the jobs panel, then on the re-run button right beside. The button is visible only after the whole workflow is finished or cancelled, regardless of the outcome"
  
  deploy:
    name: deploy
    needs: init
    runs-on:  ${{ inputs.runner }}
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
      packages: read
      issues: write
    container:
      image: ghcr.io/myriad-sas/${{ inputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      continue:  ${{ steps.check-continue.outputs.continue }}
    steps:
      - name: init container
        uses: myriad-actions/init-container@main
      - name: init job  
        uses: myriad-actions/init-job@main
        with:
          github-pat: ${{ secrets.github-pat }}
          env-path: ${{ inputs.env-path }}
      - name: init cache
        uses: actions/cache@v3
        with:
          path: main/${{ env.ARTIFACTS-SRC-PATH }}
          key: ${{ github.sha }}
      - name: request approval
        uses: trstringer/manual-approval@v1
        if: inputs.environment == 'preprod'
        id: approval
        timeout-minutes: 20
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ env.PREPROD-APPROVERS }}
          minimum-approvals: 1
          issue-title: "requested by ${{ github.actor }}"
        continue-on-error: true
      - name: check continue
        id: check-continue
        if: inputs.environment == 'preprod'
        run: |
          ${{ steps.approval.outcome == 'failure' && inputs.environment == 'preprod' }} && echo "continue=false" >> $GITHUB_OUTPUT || echo "continue=true" >> $GITHUB_OUTPUT 
      - name: checkout configurations
        uses: actions/checkout@v3
        with:
          repository:  ${{ env.CI-CONFIG-REPO }}
          token: ${{ secrets.github-pat }}
          path: ${{ env.CI-CONFIG-FOLDER-NAME }}
      - name: deploy
        permissions:
          id-token: write
          contents: read
        uses: myriad-actions/deploy@main
        if: steps.check-continue.outputs.continue != 'false'
        with:
          task_name: ${{ inputs.task_name }}
          container_name: ${{ inputs.container_name }}
          image_name: ${{ inputs.image_name }}
          cluster_name: ${{ inputs.cluster_name }}
          ecs_service_name: ${{ inputs.ecs_service_name }}
          config-path: ${{ inputs.config-path }}
      - name: freeze prod
        uses: myriad-actions/set-deployment-freeze-status@main
        if: inputs.environment == 'prod' && steps.check-continue.outputs.continue != 'false'
        with:
          environment: prod
          github-pat:  ${{ secrets.github-pat }}
          status: frozen

  validate:
    name: validate
    needs: deploy
    if: needs.deploy.outputs.continue != 'false'
    runs-on:  ${{ inputs.runner }}
    permissions:
      id-token: write
      contents: read
      packages: read
    container:
      image: ghcr.io/myriad-sas/${{ inputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: init container
        uses: myriad-actions/init-container@main
      - name: init job  
        uses: myriad-actions/init-job@main
        with:
          github-pat: ${{ secrets.github-pat }}
          env-path: ${{ inputs.env-path }}
      - name: init cache
        uses: actions/cache@v3
        with:
          path: main/${{ env.ARTIFACTS-SRC-PATH }}
          key: ${{ github.sha }}
      - name: validate installed version
        uses: myriad-actions/run@main
        with:
          script: ${{ env.SCRIPT41 }} 
          args: ${{ inputs.environment }}
